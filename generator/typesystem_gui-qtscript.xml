<?xml version="1.0"?>
<typesystem package="com.trolltech.qt.gui">

  <rejection class="QAbstractTextDocumentLayout"/>
  <rejection class="QFontDatabase"/>
  <rejection class="QIconEngineV2"/>
  <rejection class="QInputMethodEvent"/>
  <rejection class="QPainterPath::Element"/>
  <rejection class="QTextBlock::iterator"/>
  <rejection class="QTextFrame::iterator"/>
  <rejection class="QTextLayout::FormatRange"/>

  <!-- ### the generator uses the java name -->
  <rejection class="QAccessibleFactoryInterface"/>
  <rejection class="QIconEngineFactoryInterfaceV2"/>
  <rejection class="QImageIOHandlerFactoryInterface"/>  
  <rejection class="QPictureFormatInterface"/>

  <!-- ### these don't compile -->
  <rejection class="QTextOption"/> <!-- ### nested class QTextOption::Tab -->

  <object-type name="QFileOpenEvent">
    <modify-function signature="openFile(QFile&amp;,QFlags&lt;QIODevice::OpenModeFlag&gt;)const" remove="all"/>
  </object-type>

  <object-type name="QIconEngine">
    <modify-function signature="read(QDataStream&amp;)">
        <modify-argument index="1">
            <replace-type modified-type="QDataStream*"/>
            <conversion-rule class="native">
                QDataStream &amp; %out% = *qscriptvalue_cast&lt;QDataStream*&gt;(%in%);
            </conversion-rule>
            <conversion-rule class="shell">
                jobject %out = qtjambi_from_object(__jni_env, %in, "QImage", "com/trolltech/qt/gui/", false);
                QtJambiLink *__link = %out != 0 ? QtJambiLink::findLink(__jni_env, %out) : 0;
            </conversion-rule>
        </modify-argument>
    </modify-function>
    <modify-function signature="write(QDataStream&amp;)const">
        <modify-argument index="1">
            <replace-type modified-type="QDataStream*"/>
            <conversion-rule class="native">
                QDataStream &amp; %out% = *qscriptvalue_cast&lt;QDataStream*&gt;(%in%);
            </conversion-rule>
        </modify-argument>
    </modify-function>
  </object-type>

  <value-type name="QTextFormat">
    <modify-function signature="setProperty(int,QVector&lt;QTextLength&gt;)" rename="setLengthVectorProperty"/>
    <inject-code class="native" position="constructor">
    if ((context-&gt;argumentCount() == 1) &amp;&amp; (qMetaTypeId&lt;QTextFormat&gt;() == context-&gt;argument(0).toVariant().userType())) {
        QTextFormat _q_arg0 = qscriptvalue_cast&lt;QTextFormat&gt;(context->argument(0));
        QTextFormat _q_cpp_result(_q_arg0);
        QScriptValue _q_result = context-&gt;engine()-&gt;newVariant(context-&gt;thisObject(), qVariantFromValue(_q_cpp_result));
        return _q_result;
    }
    </inject-code>
  </value-type>

  <value-type name="QBrush">
    <modify-function signature="QBrush(QGradient)">
      <modify-argument index="1">
        <replace-type modified-type="QGradient*"/>
        <conversion-rule class="native">
        QGradient &amp; %out% = *qscriptvalue_cast&lt;QGradient*&gt;(%in%);
        </conversion-rule>            
      </modify-argument>
    </modify-function>
  </value-type>

  <value-type name="QFontInfo">
    <modify-function signature="QFontInfo(QFontInfo)">
      <modify-argument index="1">
        <replace-type modified-type="QFontInfo*"/>
        <conversion-rule class="native">
        QFontInfo &amp; %out% = *qscriptvalue_cast&lt;QFontInfo*&gt;(%in%);
        </conversion-rule>            
      </modify-argument>
    </modify-function>
  </value-type>

  <!-- ### QFontMetrics and QFontMetricsF are value-typed but don't have default constructor -->
  <value-type name="QFontMetrics">
    <modify-function signature="QFontMetrics(QFontMetrics)" remove="all"/>
    <modify-function signature="operator==(QFontMetrics)const" remove="all"/>
    <modify-function signature="operator!=(QFontMetrics)const" remove="all"/>
  </value-type>
  <value-type name="QFontMetricsF">
    <modify-function signature="QFontMetricsF(QFontMetricsF)" remove="all"/>
    <modify-function signature="QFontMetricsF(QFontMetrics)" remove="all"/>
    <modify-function signature="operator==(QFontMetricsF)const" remove="all"/>
    <modify-function signature="operator!=(QFontMetricsF)const" remove="all"/>
  </value-type>

  <value-type name="QImage">
    <modify-function signature="QImage(const char**)" remove="all"/>
    <modify-function signature="QImage(const uchar *,int,int,QImage::Format)" remove="all"/>
    <modify-function signature="QImage(const uchar *,int,int,int,QImage::Format)" remove="all"/>
    <modify-function signature="QImage(uchar *,int,int,QImage::Format)" remove="all"/>
    <modify-function signature="QImage(uchar *,int,int,int,QImage::Format)" remove="all"/>
    <modify-function signature="setColorTable(const QVector&lt;uint&gt;)" remove="all"/>
    <modify-function signature="loadFromData(const uchar *,int,const char *)" remove="all"/>
    <modify-function signature="fromData(const uchar *,int,const char *)" remove="all"/>
    <modify-function signature="bits()" remove="all"/>
    <modify-function signature="scanLine(int)" remove="all"/>

    <modify-function signature="QImage(QString,const char*)">
      <modify-argument index="2">
        <replace-type modified-type="QString"/>
        <conversion-rule class="native">
          <insert-template name="core.convert_string_arg_to_char*"/>
        </conversion-rule>            
      </modify-argument>
    </modify-function>

    <modify-function signature="fromData(QByteArray,const char*)">
      <modify-argument index="2">
        <replace-type modified-type="QString"/>
        <conversion-rule class="native">
          <insert-template name="core.convert_string_arg_to_char*"/>
        </conversion-rule>            
      </modify-argument>
    </modify-function>

    <modify-function signature="load(QString,const char*)">
      <modify-argument index="2">
        <replace-type modified-type="QString"/>
        <conversion-rule class="native">
          <insert-template name="core.convert_string_arg_to_char*"/>
        </conversion-rule>            
      </modify-argument>
    </modify-function>

    <modify-function signature="load(QIODevice*,const char*)">
      <modify-argument index="2">
        <replace-type modified-type="QString"/>
        <conversion-rule class="native">
          <insert-template name="core.convert_string_arg_to_char*"/>
        </conversion-rule>            
      </modify-argument>
    </modify-function>

    <modify-function signature="loadFromData(QByteArray,const char*)">
      <modify-argument index="2">
        <replace-type modified-type="QString"/>
        <conversion-rule class="native">
          <insert-template name="core.convert_string_arg_to_char*"/>
        </conversion-rule>            
      </modify-argument>
    </modify-function>

    <modify-function signature="save(QString,const char*,int)const">
      <modify-argument index="2">
        <replace-type modified-type="QString"/>
        <conversion-rule class="native">
          <insert-template name="core.convert_string_arg_to_char*"/>
        </conversion-rule>            
      </modify-argument>
    </modify-function>

    <modify-function signature="save(QIODevice*,const char*,int)const">
      <modify-argument index="2">
        <replace-type modified-type="QString"/>
        <conversion-rule class="native">
          <insert-template name="core.convert_string_arg_to_char*"/>
        </conversion-rule>            
      </modify-argument>
    </modify-function>

  </value-type>

  <object-type name="QPainter">
    <modify-function signature="fontInfo()const" remove="all"/>
    <modify-function signature="fontMetrics()const" remove="all"/>
    <modify-function signature="QPainter(QPaintDevice*)" remove="all"/>

    <modify-function signature="begin(QPaintDevice*)">
      <modify-argument index="1">
        <conversion-rule class="native">
        <insert-template name="core.convert_pointer_arg_and_check_null">
          <replace from="%TYPE%" to="QPaintDevice*"/>
          <replace from="%CLASS_NAME%" to="QPainter"/>
          <replace from="%FUNCTION_NAME%" to="begin"/>
        </insert-template>
        </conversion-rule>
      </modify-argument>
    </modify-function>
  </object-type>

  <value-type name="QPicture">
    <modify-function signature="setData(const char*,uint)" remove="all"/>

    <modify-function signature="load(QIODevice*,const char*)">
      <modify-argument index="2">
        <replace-type modified-type="QString"/>
        <conversion-rule class="native">
          <insert-template name="core.convert_string_arg_to_char*"/>
        </conversion-rule>            
      </modify-argument>
    </modify-function>

    <modify-function signature="load(QString,const char*)">
      <modify-argument index="2">
        <replace-type modified-type="QString"/>
        <conversion-rule class="native">
          <insert-template name="core.convert_string_arg_to_char*"/>
        </conversion-rule>            
      </modify-argument>
    </modify-function>

    <modify-function signature="save(QIODevice*,const char*)">
      <modify-argument index="2">
        <replace-type modified-type="QString"/>
        <conversion-rule class="native">
          <insert-template name="core.convert_string_arg_to_char*"/>
        </conversion-rule>            
      </modify-argument>
    </modify-function>

    <modify-function signature="save(QString,const char*)">
      <modify-argument index="2">
        <replace-type modified-type="QString"/>
        <conversion-rule class="native">
          <insert-template name="core.convert_string_arg_to_char*"/>
        </conversion-rule>            
      </modify-argument>
    </modify-function>
  </value-type>

  <object-type name="QPictureIO">
    <modify-function signature="QPictureIO(QIODevice*,const char*)">
      <modify-argument index="2">
        <replace-type modified-type="QString"/>
        <conversion-rule class="native">
          <insert-template name="core.convert_string_arg_to_char*"/>
        </conversion-rule>            
      </modify-argument>
    </modify-function>

    <modify-function signature="QPictureIO(QString,const char*)">
      <modify-argument index="2">
        <replace-type modified-type="QString"/>
        <conversion-rule class="native">
          <insert-template name="core.convert_string_arg_to_char*"/>
        </conversion-rule>            
      </modify-argument>
    </modify-function>

    <modify-function signature="setFormat(const char*)">
      <modify-argument index="1">
        <replace-type modified-type="QString"/>
        <conversion-rule class="native">
          <insert-template name="core.convert_string_arg_to_char*"/>
        </conversion-rule>            
      </modify-argument>
    </modify-function>

    <modify-function signature="setParameters(const char*)">
      <modify-argument index="1">
        <replace-type modified-type="QString"/>
        <conversion-rule class="native">
          <insert-template name="core.convert_string_arg_to_char*"/>
        </conversion-rule>            
      </modify-argument>
    </modify-function>
    <modify-function signature="windowOpacity()const" remove="all"/>
  </object-type>

  <value-type name="QPixmap">
    <modify-function signature="loadFromData(const uchar *,uint,const char *,QFlags&lt;Qt::ImageConversionFlag&gt;)" remove="all"/>
    <modify-function signature="QPixmap(QString,const char*,QFlags&lt;Qt::ImageConversionFlag&gt;)">
      <modify-argument index="2">
        <replace-type modified-type="QString"/>
        <conversion-rule class="native">
          <insert-template name="core.convert_string_arg_to_char*"/>
        </conversion-rule>            
      </modify-argument>
    </modify-function>

    <modify-function signature="load(QString,const char*,QFlags&lt;Qt::ImageConversionFlag&gt;)">
      <modify-argument index="2">
        <replace-type modified-type="QString"/>
        <conversion-rule class="native">
          <insert-template name="core.convert_string_arg_to_char*"/>
        </conversion-rule>            
      </modify-argument>
    </modify-function>

    <modify-function signature="loadFromData(QByteArray,const char*,QFlags&lt;Qt::ImageConversionFlag&gt;)">
      <modify-argument index="2">
        <replace-type modified-type="QString"/>
        <conversion-rule class="native">
          <insert-template name="core.convert_string_arg_to_char*"/>
        </conversion-rule>            
      </modify-argument>
    </modify-function>

    <modify-function signature="save(QIODevice*,const char*,int)const">
      <modify-argument index="2">
        <replace-type modified-type="QString"/>
        <conversion-rule class="native">
          <insert-template name="core.convert_string_arg_to_char*"/>
        </conversion-rule>            
      </modify-argument>
    </modify-function>

    <modify-function signature="save(QString,const char*,int)const">
      <modify-argument index="2">
        <replace-type modified-type="QString"/>
        <conversion-rule class="native">
          <insert-template name="core.convert_string_arg_to_char*"/>
        </conversion-rule>            
      </modify-argument>
    </modify-function>
  </value-type>

  <value-type name="QBitmap">
    <modify-function signature="fromData(QSize,const uchar*,QImage::Format)" remove="all"/>

    <modify-function signature="QBitmap(QString,const char*)">
      <modify-argument index="2">
        <replace-type modified-type="QString"/>
        <conversion-rule class="native">
          <insert-template name="core.convert_string_arg_to_char*"/>
        </conversion-rule>            
      </modify-argument>
    </modify-function>
  </value-type>

  <value-type name="QMatrix">
      <modify-function signature="inverted(bool*)const">
        <modify-argument index="1">
            <remove-argument/>
        </modify-argument>
      </modify-function>
  </value-type>

  <value-type name="QTransform">
      <modify-function signature="inverted(bool*)const">
        <modify-argument index="1">
            <remove-argument/>
        </modify-argument>
      </modify-function>
  </value-type>

  <suppress-warning text="WARNING(MetaJavaBuilder) :: Rejected enum has no alternative...: QPalette::NColorRoles" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: Cannot find enum constant for value 'DragMove' in 'QDragMoveEvent' or any of its super classes" />
  <suppress-warning text="WARNING() :: Unknown attribute for 'modify-function': 'allow-as-slot'" />

</typesystem>
